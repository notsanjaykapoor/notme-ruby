<div id='map' style='width: 100%; position: absolute; top: 150px; bottom: 0; left: 0; right: 0;'></div>
<script>
    mapboxgl.accessToken = "<%= @mapbox_token %>"

    var city_name = "<%= @city_name %>"
    var city_lon = parseFloat("<%= @city_lon %>")
    var city_lat = parseFloat("<%= @city_lat %>")
    var bbox_lat_min = parseFloat("<%= @bbox_lat_min %>")
    var bbox_lat_max = parseFloat("<%= @bbox_lat_max %>")
    var bbox_lon_min = parseFloat("<%= @bbox_lon_min %>")
    var bbox_lon_max = parseFloat("<%= @bbox_lon_max %>")

    console.log(city_name, city_lon, city_lat, "bbox", bbox_lon_min, bbox_lat_min, bbox_lon_max, bbox_lat_max)

    var map = new mapboxgl.Map({
        center: [city_lon, city_lat], // starting position [lng, lat]
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/light-v11', // style URL
        zoom: 10, // starting zoom
    })

    map.on('load', async () => {
        const geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            bbox: [bbox_lon_min, bbox_lat_min, bbox_lon_max, bbox_lat_max],
            mapboxgl: mapboxgl,
            placeholder: 'Enter an address or place name',
            zoom: 10,
        });

        map.addControl(geocoder, 'top-left');

        const marker = new mapboxgl.Marker({
            'color': '#008000'
        })

        map.addSource('tilequery', {
            type: 'geojson',
            data: {
                'type': 'FeatureCollection',
                'features': [
                    {
                        'type': 'Feature',
                        'geometry': {
                            'coordinates': [city_lon, city_lat],
                            'type': 'Point',
                        },
                        'properties': {
                            'feature_type': 'poi',
                            'maki': 'restaurant',
                            'name': 'Rando',
                            'poi_category': ['american restaurant', 'brunch restaurant', 'food', 'food and drink', 'restaurant'],
                            'tag': 'food',
                        },
                    }
                ]
            }
        })

        map.addLayer({
            id: 'tilequery-points',
            type: 'circle',
            source: 'tilequery',
            paint: {
                'circle-stroke-color': 'white',
                'circle-stroke-width': {
                    stops: [
                        [0, 0.1],
                        [18, 3]
                    ],
                    base: 5
                },
                'circle-radius': {
                    stops: [
                        [12, 5],
                        [22, 180]
                    ],
                    base: 5
                },
                'circle-color': [
                    'match',
                    ['get', 'tag'],
                    'drinks',
                    '#1D4ED8', // dark blue
                    'food',
                    '#1D4ED8', // dark blue
                    'shopping',
                    '#EA580C', // orange/rust
                    'Convenience Store With Gas',
                    '#FF8C00',
                    'Pharmacy',
                    '#FF8C00',
                    'Specialty Food Store',
                    '#9ACD32',
                    'Small Grocery Store',
                    '#008000',
                    'Supercenter',
                    '#008000',
                    'Superette',
                    '#008000',
                    'Supermarket',
                    '#008000',
                    'Warehouse Club Store',
                    '#008000',
                    '#EAB308' // mustard - any other
                ]
            }
        })

        const ts_uri = `http://localhost:3030/api/v1/map/tileset?city=${city_name}&lat=${city_lat}&lon=${city_lon}`
        const query = await fetch(ts_uri, {method: 'GET'})
        const json = await query.json()
        console.log(city_name, "tileset", json)
        map.getSource('tilequery').setData(json)

        const popup = new mapboxgl.Popup()

        map.on('mouseenter', 'tilequery-points', (event) => {
            map.getCanvas().style.cursor = 'pointer'
            const geo = event.features[0].geometry.coordinates
            const properties = event.features[0].properties

            console.log("point geo", geo)
            console.log("point properties", properties)
        })

        map.on('mouseleave', 'tilequery-points', () => {
            map.getCanvas().style.cursor = 'default'
            console.log("mouseleave")
            popup.remove()
        })
    })
</script>
