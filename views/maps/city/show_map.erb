<div class="flex flex-row mt-7 mx-5">
    <div class="w-12/12">
        <% tags_list.each do |tag| %>
            <% tag_color = tags_color.fetch(tag) %>

            <% if tags_cur.include?(tag) %>
                <button class="rounded-full text-xs font-bold text-white bg-<%= tag_color %>-300 py-1 px-2"><%= tag %></button>
            <% else %>
                <a href="<%= request_path %>?q=tags:<%= tag %>">
                    <button class="rounded-full text-xs font-bold text-white bg-<%= tag_color %>-600 py-1 px-2"><%= tag %></button>
                </a>
            <% end %>
        <% end %>
    </div>
</div>


<div id='map' style='width: 100%; position: absolute; top: 200px; bottom: 0; left: 0; right: 0;'></div>

<span id="test" hx-get="/maps/city/<%= city.id %>/count" hx-trigger="map-changed from:body"/>

<script>
    mapboxgl.accessToken = "<%= mapbox_token %>"

    var city_id = "<%= city.id %>"
    var city_name = "<%= city.name %>"
    var city_query = "<%= query %>"
    var city_lon = parseFloat("<%= city.lon %>")
    var city_lat = parseFloat("<%= city.lat %>")
    var bbox_lat_min = parseFloat("<%= city.lat_min %>")
    var bbox_lat_max = parseFloat("<%= city.lat_max %>")
    var bbox_lon_min = parseFloat("<%= city.lon_min %>")
    var bbox_lon_max = parseFloat("<%= city.lon_max %>")

    console.log(city_name, city_lon, city_lat, "bbox", bbox_lon_min, bbox_lat_min, bbox_lon_max, bbox_lat_max)

    var map = new mapboxgl.Map({
        center: [city_lon, city_lat], // starting position [lng, lat]
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/light-v11', // style URL
        zoom: 10, // starting zoom
    })

    function place_name_show(s) {
        document.getElementById('place-name').innerHTML = s
    }

    map.on('load', async () => {
        const geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            bbox: [bbox_lon_min, bbox_lat_min, bbox_lon_max, bbox_lat_max],
            mapboxgl: mapboxgl,
            placeholder: 'Enter an address or place name',
            zoom: 10, // same starting zoom as above
        });

        // disable search box
        // map.addControl(geocoder, 'top-left');

        const marker = new mapboxgl.Marker({
            'color': '#008000'
        })

        map.addSource('tilequery', {
            type: 'geojson',
            data: {
                'type': 'FeatureCollection',
                'features': [
                    {
                        'type': 'Feature',
                        'geometry': {
                            'coordinates': [city_lon, city_lat],
                            'type': 'Point',
                        },
                        'properties': {
                            'feature_type': 'poi',
                            'maki': 'restaurant',
                            'name': 'Rando',
                            'poi_category': ['american restaurant', 'brunch restaurant', 'food', 'food and drink', 'restaurant'],
                            'tag': 'food',
                        },
                    }
                ]
            }
        })

        map.addLayer({
            id: 'tilequery-points',
            type: 'circle',
            source: 'tilequery',
            paint: {
                'circle-stroke-color': 'white',
                'circle-stroke-width': {
                    stops: [
                        [0, 0.1],
                        [18, 3]
                    ],
                    base: 5
                },
                'circle-radius': {
                    stops: [
                        [12, 5],
                        [22, 180]
                    ],
                    base: 5
                },
                'circle-color': [
                    'match',
                    ['get', 'color'],
                    'blue',
                    '#1D4ED8', // dark blue
                    'green',
                    '#16A34A', // green
                    'orange',
                    '#EA580C', // orange/rust
                    'yellow',
                    '#EAB308', // mustard
                    'Convenience Store With Gas',
                    '#FF8C00',
                    'Pharmacy',
                    '#FF8C00',
                    'Specialty Food Store',
                    '#9ACD32',
                    'Small Grocery Store',
                    '#008000',
                    '#EAB308' // mustard - any other
                ]
            }
        })

        const ts_uri = `http://localhost:5001/api/v1/maps/tileset?city_id=${city_id}&lat=${city_lat}&lon=${city_lon}&q=${city_query}`
        const query = await fetch(ts_uri, {method: 'GET'})
        const json = await query.json()

        console.log(city_name, "tileset", json)
        
        // update map
        map.getSource('tilequery').setData(json)

        // update map count
        document.getElementById("city-count").innerHTML = `${json.features.length} places`

        const popup = new mapboxgl.Popup()

        // map point(s) hover logic

        map.on('mouseenter', 'tilequery-points', (event) => {
            map.getCanvas().style.cursor = 'pointer'
            const geo = event.features[0].geometry.coordinates
            const properties = event.features[0].properties

            console.log("point geo", geo)
            console.log("point properties", properties)

            place_name_show(properties.name)
        })

        map.on('mouseleave', 'tilequery-points', () => {
            map.getCanvas().style.cursor = 'default'
            console.log("mouseleave")
            popup.remove()

            place_name_show("")
        })
    })
</script>
